from datetime import datetime, timedelta
from sqlalchemy import select, func
from sqlalchemy.orm import Session
from database.models import User, UserWord, Word
from aiogram import Bot
from config import NOTIFICATION_HOURS
import asyncio
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

class NotificationService:
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def send_reminder_to_user(self, user_telegram_id: int, words_count: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞"""
        try:
            if words_count == 0:
                return
                
            notification_text = (
                f"üîî <b>–í—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!</b>\n\n"
                f"–£ –≤–∞—Å –µ—Å—Ç—å <b>{words_count}</b> —Å–ª–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é.\n\n"
                f"üí° <b>–°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</b>\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            ready_words_query = select(Word).join(UserWord).where(
                UserWord.user_id == user.id,
                UserWord.next_repetition <= datetime.utcnow(),
                UserWord.is_learned == False
            ).limit(5)
            ready_words_result = await session.execute(ready_words_query)
            ready_words = ready_words_result.scalars().all()
            
            for word in ready_words:
                notification_text += f"‚Ä¢ {word.word}\n"
            
            if words_count > 5:
                notification_text += f"... –∏ –µ—â–µ {words_count - 5} —Å–ª–æ–≤\n"
            
            notification_text += "\n–ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª! üéØ"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training")]
            ])
            
            await self.bot.send_message(
                chat_id=user_telegram_id,
                text=notification_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
    
    async def get_users_for_reminder(self, session: Session) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        current_time = datetime.utcnow()
        
        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
        words_subquery = select(func.count(UserWord.id)).where(
            UserWord.user_id == User.id,
            UserWord.next_repetition <= current_time,
            UserWord.is_learned == False
        ).scalar_subquery()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        query = select(
            User.telegram_id,
            words_subquery.label('words_count')
        ).where(
            User.is_active == True,
            User.notifications_enabled == True,
            words_subquery > 0
        )
        
        result = await session.execute(query)
        return result.all()
    
    async def send_daily_reminders(self, session: Session):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        users_for_reminder = await self.get_users_for_reminder(session)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {len(users_for_reminder)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        for user_telegram_id, words_count in users_for_reminder:
            await self.send_reminder_to_user(user_telegram_id, words_count)
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
            await asyncio.sleep(0.1)
    
    async def send_custom_reminder(self, session: Session, user_telegram_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(
                chat_id=user_telegram_id,
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    async def get_user_statistics_for_reminder(self, session: Session, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ª–∏—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
        total_words_query = select(func.count(UserWord.id)).where(
            UserWord.user_id == user_id,
            UserWord.is_learned == False
        )
        total_words_result = await session.execute(total_words_query)
        total_words = total_words_result.scalar()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
        ready_words_query = select(func.count(UserWord.id)).where(
            UserWord.user_id == user_id,
            UserWord.next_repetition <= datetime.utcnow(),
            UserWord.is_learned == False
        )
        ready_words_result = await session.execute(ready_words_query)
        ready_words = ready_words_result.scalar()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        learned_words_query = select(func.count(UserWord.id)).where(
            UserWord.user_id == user_id,
            UserWord.is_learned == True
        )
        learned_words_result = await session.execute(learned_words_query)
        learned_words = learned_words_result.scalar()
        
        return {
            'total_words': total_words,
            'ready_words': ready_words,
            'learned_words': learned_words
        }
    
    async def send_motivational_reminder(self, session: Session, user_telegram_id: int, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        stats = await self.get_user_statistics_for_reminder(session, user_id)
        
        if stats['ready_words'] == 0:
            return
            
        progress_percentage = (stats['learned_words'] / (stats['learned_words'] + stats['total_words'])) * 100 if (stats['learned_words'] + stats['total_words']) > 0 else 0
        
        motivational_messages = [
            f"üåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —É–∂–µ –≤—ã—É—á–∏–ª–∏ {stats['learned_words']} —Å–ª–æ–≤!",
            f"üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage:.1f}% –æ—Ç –≤—Å–µ—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤!",
            f"üéØ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ - –≤—Å–µ–≥–æ {stats['ready_words']} —Å–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é!",
            f"üí™ –ö–∞–∂–¥–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏!"
        ]
        
        import random
        motivation = random.choice(motivational_messages)
        
        message_text = (
            f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏**\n\n"
            f"{motivation}\n\n"
            f"üìö –°–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: **{stats['ready_words']}**\n"
            f"‚úÖ –£–∂–µ –≤—ã—É—á–µ–Ω–æ: **{stats['learned_words']}**\n"
            f"üìñ –í—Å–µ–≥–æ –≤ –∏–∑—É—á–µ–Ω–∏–∏: **{stats['total_words']}**\n\n"
            f"–ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è! üöÄ"
        )
        
        await self.send_custom_reminder(session, user_telegram_id, message_text) 