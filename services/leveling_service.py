from typing import List, Tuple, Optional
from sqlalchemy import select, desc, func
from database.models import User, UserWord, Word
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import date, timedelta

class LevelingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–≤–Ω–µ–π –∏ –æ–ø—ã—Ç–∞"""
    
    def __init__(self):
        self._level_names = self._load_level_names()
        self._experience_thresholds = self._calculate_experience_thresholds()
    
    def _load_level_names(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open("–Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π.txt", "r", encoding="utf-8") as file:
                names = []
                for line in file:
                    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏ —Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                    name = line.strip()
                    if name and name[0].isdigit():
                        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –∏–ª–∏ —Ç–∞–±—É–ª—è—Ü–∏—é –∏ –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ—ë
                        if '\t' in name:
                            name = name.split('\t', 1)[1]
                        elif '.' in name:
                            name = name.split('.', 1)[1].strip()
                    names.append(name)
                return names
        except FileNotFoundError:
            # –ó–∞–ø–∞—Å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
            return [
                "–ù–æ–≤–∏—á–æ–∫", "–£—á–µ–Ω–∏–∫", "–ó–Ω–∞—Ç–æ–∫", "–≠–∫—Å–ø–µ—Ä—Ç", "–ú–∞—Å—Ç–µ—Ä",
                "–ì—É—Ä—É", "–õ–µ–≥–µ–Ω–¥–∞", "–ß–µ–º–ø–∏–æ–Ω", "–ì–µ—Ä–æ–π", "–¢–∏—Ç–∞–Ω",
                "–ë–æ–∂–µ—Å—Ç–≤–æ", "–ê–±—Å–æ–ª—é—Ç", "–ö–æ—Å–º–æ—Å", "–í—Å–µ–ª–µ–Ω–Ω–∞—è", "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å",
                "–í–µ—á–Ω–æ—Å—Ç—å", "–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ", "–ò–¥–µ–∞–ª", "–ù–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–π", "–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π",
                "–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "–≠–ø–∏—á–µ—Å–∫–∏–π", "–í–µ–ª–∏—á–∞–π—à–∏–π"
            ]
    
    def _calculate_experience_thresholds(self) -> List[int]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä–æ–≥–∏ –æ–ø—ã—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        thresholds = [0]  # –£—Ä–æ–≤–µ–Ω—å 1 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 –æ–ø—ã—Ç–∞
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        # –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –Ω–∏–∑–∫–∏—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        base_exp = 100
        
        for level in range(2, 26):  # —É—Ä–æ–≤–Ω–∏ 2-25
            if level <= 10:
                # –î–ª—è –Ω–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π (2-10): —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è
                exp_needed = int(base_exp * (level ** 1.5) + (level - 1) * 50)
            elif level <= 15:
                # –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π (11-15): —É–º–µ—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                exp_needed = int(base_exp * (level ** 1.8) + (level - 1) * 100)
            else:
                # –î–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π (16-25): —É–º–µ—Ä–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
                exp_needed = int(base_exp * (level ** 1.9) + (level - 1) * 150)
            
            thresholds.append(thresholds[-1] + exp_needed)
        
        return thresholds
    
    def get_level_name(self, level: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –Ω–æ–º–µ—Ä—É"""
        if 1 <= level <= len(self._level_names):
            return self._level_names[level - 1]
        return f"–£—Ä–æ–≤–µ–Ω—å {level}"
    
    def get_level_by_experience(self, experience: int) -> int:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø—ã—Ç–∞"""
        level = 1
        for i, threshold in enumerate(self._experience_thresholds):
            if experience >= threshold:
                level = i + 1
            else:
                break
        return min(level, 25)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å 25
    
    def get_experience_for_next_level(self, current_level: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if current_level >= 25:
            return 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        
        return self._experience_thresholds[current_level]
    
    def get_experience_progress(self, experience: int, level: int) -> Tuple[int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—ã—Ç–∞: (—Ç–µ–∫—É—â–∏–π_–æ–ø—ã—Ç_—É—Ä–æ–≤–Ω—è, –æ–ø—ã—Ç_–¥–æ_—Å–ª–µ–¥—É—é—â–µ–≥–æ_—É—Ä–æ–≤–Ω—è)"""
        if level >= 25:
            return (experience, 0)
        
        level_start = self._experience_thresholds[level - 1] if level > 1 else 0
        level_end = self._experience_thresholds[level]
        
        current_progress = experience - level_start
        total_needed = level_end - level_start
        
        return (current_progress, total_needed)
    
    def calculate_experience_reward(self, difficulty_level: int = 1, streak: int = 0) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        base_reward = 10  # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        difficulty_bonus = difficulty_level * 2  # –ë–æ–Ω—É—Å –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        streak_bonus = min(streak, 10) * 1  # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é (–º–∞–∫—Å–∏–º—É–º 10)
        
        return base_reward + difficulty_bonus + streak_bonus
    
    async def add_experience(self, session: AsyncSession, user: User, experience: int) -> Tuple[bool, int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (level_up_occurred, new_level)
        """
        old_level = user.level
        user.experience_points += experience
        
        new_level = self.get_level_by_experience(user.experience_points)
        user.level = new_level
        
        await session.commit()
        
        return (new_level > old_level, new_level)
    
    async def update_streak(self, session: AsyncSession, user: User) -> Tuple[int, bool]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–æ–≤—ã–π_—Å—Ç—Ä–∏–∫, –Ω–æ–≤—ã–π_—Ä–µ–∫–æ—Ä–¥)
        """
        today = date.today()
        yesterday = today - timedelta(days=1)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–Ω–∏–º–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, —Å—Ç—Ä–∏–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        if user.last_training_date == today:
            return user.current_streak, False
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –≤—á–µ—Ä–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç—Ä–∏–∫
        if user.last_training_date == yesterday:
            user.current_streak += 1
        # –ï—Å–ª–∏ –±—ã–ª–∞ –±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ - –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–∫ –∑–∞–Ω–æ–≤–æ
        elif user.last_training_date is None or user.last_training_date < yesterday:
            user.current_streak = 1
        else:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return user.current_streak, False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        user.last_training_date = today
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–±–∏–ª–∏ –ª–∏ —Ä–µ–∫–æ—Ä–¥
        new_record = False
        if user.current_streak > user.best_streak:
            user.best_streak = user.current_streak
            new_record = True
        
        await session.commit()
        
        return user.current_streak, new_record
    
    async def get_leaderboard(self, session: AsyncSession, limit: int = 10) -> List[Tuple[User, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é –∏ –æ–ø—ã—Ç—É"""
        query = select(User).where(User.is_active == True).order_by(
            desc(User.level),
            desc(User.experience_points)
        ).limit(limit)
        
        result = await session.execute(query)
        users = result.scalars().all()
        
        leaderboard = []
        for user in users:
            level_name = self.get_level_name(user.level)
            leaderboard.append((user, level_name))
        
        return leaderboard
    
    async def format_user_stats(self, user: User, session: AsyncSession) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        level_name = self.get_level_name(user.level)
        current_exp, needed_exp = self.get_experience_progress(user.experience_points, user.level)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–æ–≤–∞–º
        total_words_query = select(func.count(Word.id))
        total_words_result = await session.execute(total_words_query)
        total_words = total_words_result.scalar() or 0
        
        learned_words_query = select(func.count(UserWord.id)).where(
            UserWord.user_id == user.id,
            UserWord.is_learned == True
        )
        learned_words_result = await session.execute(learned_words_query)
        learned_words = learned_words_result.scalar() or 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        if total_words > 0:
            learned_percentage = (learned_words / total_words) * 100
        else:
            learned_percentage = 0.0
        
        stats = f"üéØ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        stats += f"üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user.level} - {level_name}\n"
        stats += f"‚≠ê <b>–û–ø—ã—Ç:</b> {user.experience_points}\n"
        stats += f"üî• <b>–°—Ç—Ä–∏–∫:</b> {user.current_streak} –¥–Ω. (—Ä–µ–∫–æ—Ä–¥: {user.best_streak} –¥–Ω.)\n"
        stats += f"üìö <b>–ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤:</b> {learned_words} –∏–∑ {total_words} ({learned_percentage:.1f}%)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
        if total_words > 0:
            words_progress_bar = self._create_progress_bar(learned_words, total_words)
            stats += f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è:</b> {words_progress_bar}\n"
        
        stats += "\n"
        
        if user.level < 25:
            progress_bar = self._create_progress_bar(current_exp, needed_exp)
            stats += f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è:</b> {current_exp}/{needed_exp}\n"
            stats += f"{progress_bar}\n"
            stats += f"üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {needed_exp - current_exp} –æ–ø—ã—Ç–∞"
        else:
            stats += f"üåü <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!</b>"
        
        return stats
    
    def _create_progress_bar(self, current: int, total: int, length: int = 10) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if total == 0:
            return "üü©" * length
        
        filled = int((current / total) * length)
        empty = length - filled
        
        return "üü©" * filled + "‚¨ú" * empty

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
leveling_service = LevelingService()
