from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from database.database import get_session
from database.models import User
from services.leveling_service import leveling_service

router = Router()

@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_user_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = await leveling_service.format_user_stats(user, session)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="show_leaderboard")],
            [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training")]
        ])
        
        await message.answer(stats_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def show_leaderboard_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–∑ –º–µ–Ω—é"""
    await show_leaderboard_internal(message)

@router.callback_query(F.data == "show_leaderboard")
async def show_leaderboard_callback(callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ callback"""
    await callback.answer()
    await show_leaderboard_internal(callback.message)

async def show_leaderboard_internal(message: Message):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
        leaderboard = await leveling_service.get_leaderboard(session, limit=10)
        
        if not leaderboard:
            await message.answer("üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        leaderboard_text = "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
        
        medals = ["ü•á", "ü•à", "ü•â"]
        
        for i, (user, level_name) in enumerate(leaderboard, 1):
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∞–ª—å –∏–ª–∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞
            if i <= 3:
                place_icon = medals[i-1]
            else:
                place_icon = f"{i}."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name = user.first_name or user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
            if len(user_name) > 20:
                user_name = user_name[:17] + "..."
            
            leaderboard_text += (
                f"{place_icon} <b>{user_name}</b>\n"
                f"    üèÜ –£—Ä–æ–≤–µ–Ω—å {user.level}: {level_name}\n"
                f"    ‚≠ê {user.experience_points} –æ–ø—ã—Ç–∞\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø–µ
        current_user_id = message.from_user.id if hasattr(message, 'from_user') else message.message.from_user.id
        
        user_in_top = any(user.telegram_id == current_user_id for user, _ in leaderboard)
        
        if not user_in_top:
            user_query = select(User).where(User.telegram_id == current_user_id)
            user_result = await session.execute(user_query)
            current_user = user_result.scalar_one_or_none()
            
            if current_user:
                current_level_name = leveling_service.get_level_name(current_user.level)
                leaderboard_text += (
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üìç <b>–í–∞—à–µ –º–µ—Å—Ç–æ:</b>\n"
                    f"üèÜ –£—Ä–æ–≤–µ–Ω—å {current_user.level}: {current_level_name}\n"
                    f"‚≠ê {current_user.experience_points} –æ–ø—ã—Ç–∞"
                )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_my_stats")],
            [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training")]
        ])
        
        await message.answer(leaderboard_text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "show_my_stats")
async def show_my_stats_callback(callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ callback"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    async for session in get_session():
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        stats_text = await leveling_service.format_user_stats(user, session)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="show_leaderboard")],
            [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training")]
        ])
        
        await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "start_training")
async def start_training_callback(callback):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ –Ω–∞—á–∞–ª—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!")
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await callback.message.answer(
        "üéØ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>'üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'</b> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        parse_mode="HTML"
    )
