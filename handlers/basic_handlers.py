from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sqlalchemy import select, func
from database.database import get_session
from database.models import User, UserWord, TrainingSession, Word
from datetime import datetime, timedelta

router = Router()

async def generate_user_statistics(user_id: int, days: int = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (None = –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è)
    
    Returns:
        tuple: (stats_text, period_name)
    """
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        period_filter = None
        period_name = ""
        if days is not None:
            period_start = datetime.utcnow() - timedelta(days=days)
            period_filter = TrainingSession.created_at >= period_start
            period_name = f"–∑–∞ {days} –¥–Ω."
        else:
            period_name = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º (–≤—Å–µ–≥–¥–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        total_words_query = select(func.count(UserWord.id)).where(UserWord.user_id == user.id)
        total_words_result = await session.execute(total_words_query)
        total_words = total_words_result.scalar()
        
        learned_words_query = select(func.count(UserWord.id)).where(
            UserWord.user_id == user.id,
            UserWord.is_learned == True
        )
        learned_words_result = await session.execute(learned_words_query)
        learned_words = learned_words_result.scalar()
        
        ready_words_query = select(func.count(UserWord.id)).where(
            UserWord.user_id == user.id,
            UserWord.next_repetition <= datetime.utcnow(),
            UserWord.is_learned == False
        )
        ready_words_result = await session.execute(ready_words_query)
        ready_words = ready_words_result.scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        training_conditions = [
            TrainingSession.user_id == user.id,
            TrainingSession.completed_at.isnot(None)
        ]
        
        if period_filter is not None:
            training_conditions.append(period_filter)
        
        total_sessions_query = select(func.count(TrainingSession.id)).where(*training_conditions)
        total_sessions_result = await session.execute(total_sessions_query)
        total_sessions = total_sessions_result.scalar()
        
        total_correct_query = select(func.sum(TrainingSession.words_correct)).where(*training_conditions)
        total_correct_result = await session.execute(total_correct_query)
        total_correct = total_correct_result.scalar() or 0
        
        total_words_trained_query = select(func.sum(TrainingSession.words_total)).where(*training_conditions)
        total_words_trained_result = await session.execute(total_words_trained_query)
        total_words_trained = total_words_trained_result.scalar() or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º, –≤—ã—É—á–µ–Ω–Ω—ã–º –∑–∞ –ø–µ—Ä–∏–æ–¥
        learned_in_period = 0
        if period_filter is not None:
            learned_in_period_query = select(func.count(UserWord.id)).where(
                UserWord.user_id == user.id,
                UserWord.is_learned == True,
                UserWord.learned_at >= period_start
            )
            learned_in_period_result = await session.execute(learned_in_period_query)
            learned_in_period = learned_in_period_result.scalar()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy = (total_correct / total_words_trained * 100) if total_words_trained > 0 else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è {period_name}</b>\n\n"
        
        if days is not None:
            stats_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: <b>{period_start.strftime('%d.%m.%Y')} - {datetime.utcnow().strftime('%d.%m.%Y')}</b>\n\n"
        
        # –°–ª–æ–≤–∞—Ä—å (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        stats_text += f"üìö <b>–¢–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏: <b>{total_words - learned_words}</b>\n"
        stats_text += f"‚Ä¢ –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: <b>{learned_words}</b> ‚úÖ\n"
        stats_text += f"‚Ä¢ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: <b>{ready_words}</b> üî¥\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥
        if days is not None:
            stats_text += f"üéØ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {period_name}:</b>\n"
            if learned_in_period > 0:
                stats_text += f"‚Ä¢ –í—ã—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: <b>{learned_in_period}</b> üéâ\n"
        else:
            stats_text += f"üéØ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {period_name}:</b>\n"
        
        stats_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>{total_sessions}</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: <b>{total_words_trained}</b>\n"
        stats_text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{total_correct}</b>\n"
        
        if total_words_trained > 0:
            stats_text += f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: <b>{accuracy:.1f}%</b>\n\n"
        else:
            stats_text += f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: <b>--</b>\n\n"
            
        if days is None and learned_words > 0:
            progress = (learned_words / (total_words or 1)) * 100
            stats_text += f"üèÜ <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% –æ—Ç –≤—Å–µ—Ö —Å–ª–æ–≤</b>\n\n"
        
        if days is None:
            stats_text += f"üìÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}"
        
        return stats_text, period_name

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    async for session in get_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        existing_user = user_result.scalar_one_or_none()
        
        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            session.add(new_user)
            await session.commit()
            
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
                f"üéØ <b>–Ø - –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤!</b>\n\n"
                f"<b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
                f"üìù –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏\n"
                f"üìö –í–µ–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –æ—à–∏–±–æ–∫\n"
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Å–∏—Å—Ç–µ–º–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è\n\n"
                f"<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:</b>\n"
                f"1. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ 25 —Å–ª–æ–≤\n"
                f"2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n"
                f"3. –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ –∫—Ä–∏–≤–æ–π –≠–±–±–∏–Ω–≥–∞—É–∑–∞\n"
                f"4. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ \"üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\" —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏–∑—É—á–µ–Ω–∏—é!"
            )
        else:
            welcome_text = (
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n\n"
                f"–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤? üìö\n"
                f"–ù–∞–∂–º–∏—Ç–µ \"üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è!"
            )
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from main import get_main_keyboard
    keyboard = get_main_keyboard()
    
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(F.text == "üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å")
async def show_dictionary(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_words_query = select(UserWord, Word).join(Word).where(
            UserWord.user_id == user.id
        ).order_by(UserWord.next_repetition)
        
        user_words_result = await session.execute(user_words_query)
        user_words = user_words_result.all()
        
        if not user_words:
            dictionary_text = (
                "üìö <b>–í–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!</b>\n\n"
                "–°–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å!"
            )
        else:
            dictionary_text = f"üìö <b>–í–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å</b>\n\n"
            
            for i, (user_word, word) in enumerate(user_words[:20], 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                now = datetime.utcnow()
                if user_word.is_learned:
                    status = "‚úÖ –í—ã—É—á–µ–Ω–æ"
                elif user_word.next_repetition <= now:
                    status = "üî¥ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é"
                else:
                    time_left = user_word.next_repetition - now
                    if time_left.days > 0:
                        status = f"‚è∞ –ß–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π"
                    elif time_left.seconds > 3600:
                        hours = time_left.seconds // 3600
                        status = f"‚è∞ –ß–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤"
                    else:
                        minutes = time_left.seconds // 60
                        status = f"‚è∞ –ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç"
                
                dictionary_text += (
                    f"{i}. <b>{word.word}</b> (–æ—à–∏–±–æ–∫: {user_word.mistakes_count})\n"
                    f"   {status}\n\n"
                )
            
            if len(user_words) > 20:
                dictionary_text += f"... –∏ –µ—â–µ {len(user_words) - 20} —Å–ª–æ–≤\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
        ])
        
        await message.answer(dictionary_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
            "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
            "üìÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:</b>\n"
            "‚Ä¢ 7 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "‚Ä¢ 14 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏\n" 
            "‚Ä¢ 21 –¥–µ–Ω—å - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Ç—Ä–∏ –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ 30 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü\n"
            "‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="stats_period_7"),
                InlineKeyboardButton(text="üìÖ 14 –¥–Ω–µ–π", callback_data="stats_period_14")
            ],
            [
                InlineKeyboardButton(text="üìÖ 21 –¥–µ–Ω—å", callback_data="stats_period_21"),
                InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="stats_period_30")
            ],
            [InlineKeyboardButton(text="üìä –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_period_all")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await message.answer(stats_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    async for session in get_session():
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        settings_text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        settings_text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        settings_text += f"üì± –ê–∫–∫–∞—É–Ω—Ç: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        settings_text += f"<b>–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> 9:00, 14:00, 19:00\n"
        settings_text += f"<b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b> –ö—Ä–∏–≤–∞—è –≠–±–±–∏–Ω–≥–∞—É–∑–∞"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîî –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if user.notifications_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="toggle_notifications"
            )],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        
        await message.answer(settings_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = (
        f"‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        f"<b>üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n"
        f"‚Ä¢ –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 25 —Å–ª–æ–≤\n"
        f"‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–∞—Ö —Å–∫—Ä—ã—Ç—ã –∑–Ω–∞–∫–æ–º '_'\n"
        f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã\n"
        f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n\n"
        f"<b>üìö –õ–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:</b>\n"
        f"‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–ª–æ–≤–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –æ—à–∏–±–ª–∏—Å—å\n"
        f"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É\n"
        f"‚Ä¢ –£–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n\n"
        f"<b>üîî –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∫—Ä–∏–≤–æ–π –∑–∞–±—ã–≤–∞–Ω–∏—è –≠–±–±–∏–Ω–≥–∞—É–∑–∞\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: 20 –º–∏–Ω ‚Üí 1 —á–∞—Å ‚Üí 9 —á–∞—Å–æ–≤ ‚Üí 1 –¥–µ–Ω—å ‚Üí 2 –¥–Ω—è ‚Üí 6 –¥–Ω–µ–π ‚Üí 31 –¥–µ–Ω—å\n"
        f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 9:00, 14:00 –∏ 19:00\n\n"
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        f"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ –í–µ–¥–µ—Ç —É—á–µ—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n\n"
        f"<b>üí° –°–æ–≤–µ—Ç—ã:</b>\n"
        f"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        f"‚Ä¢ –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è\n"
        f"‚Ä¢ –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 100% —Ç–æ—á–Ω–æ—Å—Ç–∏!"
    )
    
    await message.answer(help_text, parse_mode="HTML")

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    async for session in get_session():
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one()
        
        user.notifications_enabled = not user.notifications_enabled
        await session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        settings_text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        settings_text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        settings_text += f"üì± –ê–∫–∫–∞—É–Ω—Ç: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        settings_text += f"<b>–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> 9:00, 14:00, 19:00\n"
        settings_text += f"<b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b> –ö—Ä–∏–≤–∞—è –≠–±–±–∏–Ω–≥–∞—É–∑–∞"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîî –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if user.notifications_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="toggle_notifications"
            )],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        
        await callback.message.edit_text(settings_text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")

@router.callback_query(F.data.in_(["my_dictionary", "statistics", "help"]))
async def handle_inline_callbacks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    if callback.data == "my_dictionary":
        await show_dictionary_callback(callback)
    elif callback.data == "statistics":
        await statistics_callback(callback)
    elif callback.data == "help":
        await show_help_callback(callback)
    
    await callback.answer()

async def show_dictionary_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–ª–±—ç–∫–∞"""
    user_id = callback.from_user.id
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_words_query = select(UserWord, Word).join(Word).where(
            UserWord.user_id == user.id
        ).order_by(UserWord.next_repetition)
        
        user_words_result = await session.execute(user_words_query)
        user_words = user_words_result.all()
        
        if not user_words:
            dictionary_text = (
                "üìö <b>–í–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!</b>\n\n"
                "–°–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å!"
            )
        else:
            dictionary_text = f"üìö <b>–í–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å</b>\n\n"
            
            for i, (user_word, word) in enumerate(user_words[:20], 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                now = datetime.utcnow()
                if user_word.is_learned:
                    status = "‚úÖ –í—ã—É—á–µ–Ω–æ"
                elif user_word.next_repetition <= now:
                    status = "üî¥ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é"
                else:
                    time_left = user_word.next_repetition - now
                    if time_left.days > 0:
                        status = f"‚è∞ –ß–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π"
                    elif time_left.seconds > 3600:
                        hours = time_left.seconds // 3600
                        status = f"‚è∞ –ß–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤"
                    else:
                        minutes = time_left.seconds // 60
                        status = f"‚è∞ –ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç"
                
                dictionary_text += (
                    f"{i}. <b>{word.word}</b> (–æ—à–∏–±–æ–∫: {user_word.mistakes_count})\n"
                    f"   {status}\n\n"
                )
            
            if len(user_words) > 20:
                dictionary_text += f"... –∏ –µ—â–µ {len(user_words) - 20} —Å–ª–æ–≤\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
        ])
        
        await callback.message.answer(dictionary_text, parse_mode="HTML", reply_markup=keyboard)



async def show_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –¥–ª—è –∫–æ–ª–±—ç–∫–∞"""
    help_text = (
        f"‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        f"<b>üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n"
        f"‚Ä¢ –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 25 —Å–ª–æ–≤\n"
        f"‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–∞—Ö —Å–∫—Ä—ã—Ç—ã –∑–Ω–∞–∫–æ–º '_'\n"
        f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã\n"
        f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n\n"
        f"<b>üìö –õ–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:</b>\n"
        f"‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–ª–æ–≤–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –æ—à–∏–±–ª–∏—Å—å\n"
        f"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É\n"
        f"‚Ä¢ –£–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n\n"
        f"<b>üîî –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∫—Ä–∏–≤–æ–π –∑–∞–±—ã–≤–∞–Ω–∏—è –≠–±–±–∏–Ω–≥–∞—É–∑–∞\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: 20 –º–∏–Ω ‚Üí 1 —á–∞—Å ‚Üí 9 —á–∞—Å–æ–≤ ‚Üí 1 –¥–µ–Ω—å ‚Üí 2 –¥–Ω—è ‚Üí 6 –¥–Ω–µ–π ‚Üí 31 –¥–µ–Ω—å\n"
        f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 9:00, 14:00 –∏ 19:00\n\n"
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        f"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ –í–µ–¥–µ—Ç —É—á–µ—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n\n"
        f"<b>üí° –°–æ–≤–µ—Ç—ã:</b>\n"
        f"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        f"‚Ä¢ –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è\n"
        f"‚Ä¢ –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 100% —Ç–æ—á–Ω–æ—Å—Ç–∏!"
    )
    
    await callback.message.answer(help_text, parse_mode="HTML")

@router.message(Command("dictionary"))
async def cmd_dictionary(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /dictionary"""
    await show_dictionary(message)

@router.message(Command("statistics"))
async def cmd_statistics(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /statistics"""
    await show_statistics(message)

@router.callback_query(F.data.startswith("stats_period_"))
async def show_period_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    user_id = callback.from_user.id
    period = callback.data.replace("stats_period_", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    days_map = {
        "7": 7,
        "14": 14,
        "21": 21,
        "30": 30,
        "all": None
    }
    
    days = days_map.get(period)
    if days is None and period != "all":
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text, period_name = await generate_user_statistics(user_id, days)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="stats_period_7"),
            InlineKeyboardButton(text="üìÖ 14 –¥–Ω–µ–π", callback_data="stats_period_14")
        ],
        [
            InlineKeyboardButton(text="üìÖ 21 –¥–µ–Ω—å", callback_data="stats_period_21"),
            InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="stats_period_30")
        ],
        [InlineKeyboardButton(text="üìä –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_period_all")],
        [
            InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training"),
            InlineKeyboardButton(text="üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="my_dictionary")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_stats_menu")]
    ])
    
    await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_stats_menu")
async def back_to_stats_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
        "üìÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:</b>\n"
        "‚Ä¢ 7 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ 14 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏\n" 
        "‚Ä¢ 21 –¥–µ–Ω—å - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Ç—Ä–∏ –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ 30 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü\n"
        "‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="stats_period_7"),
            InlineKeyboardButton(text="üìÖ 14 –¥–Ω–µ–π", callback_data="stats_period_14")
        ],
        [
            InlineKeyboardButton(text="üìÖ 21 –¥–µ–Ω—å", callback_data="stats_period_21"),
            InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="stats_period_30")
        ],
        [InlineKeyboardButton(text="üìä –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_period_all")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_main")  
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    main_text = (
        "üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–æ—Ä—Ñ–µ–º!</b>\n\n"
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training")],
        [InlineKeyboardButton(text="üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="my_dictionary")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ])
    
    await callback.message.edit_text(main_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "statistics")
async def statistics_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = callback.from_user.id
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
            "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
            "üìÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:</b>\n"
            "‚Ä¢ 7 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "‚Ä¢ 14 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏\n" 
            "‚Ä¢ 21 –¥–µ–Ω—å - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Ç—Ä–∏ –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ 30 –¥–Ω–µ–π - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü\n"
            "‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="stats_period_7"),
                InlineKeyboardButton(text="üìÖ 14 –¥–Ω–µ–π", callback_data="stats_period_14")
            ],
            [
                InlineKeyboardButton(text="üìÖ 21 –¥–µ–Ω—å", callback_data="stats_period_21"),
                InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="stats_period_30")
            ],
            [InlineKeyboardButton(text="üìä –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_period_all")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()

@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /settings"""
    await show_settings(message)

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await show_help(message) 