from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func, delete
from database.database import get_session
from database.models import Word, User
from services.word_service import WordService
from config import ADMIN_ID, MORPHEME_TYPES

router = Router()

class AdminStates(StatesGroup):
    waiting_for_word = State()
    waiting_for_definition = State()
    waiting_for_morpheme_type = State()
    waiting_for_explanation = State()
    waiting_for_pattern = State()
    waiting_for_hidden_letters = State()
    waiting_for_difficulty = State()
    waiting_for_word_to_delete = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(user_id) == ADMIN_ID

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    async for session in get_session():
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_words_query = select(func.count(Word.id))
        total_words_result = await session.execute(total_words_query)
        total_words = total_words_result.scalar()
        
        total_users_query = select(func.count(User.id))
        total_users_result = await session.execute(total_users_query)
        total_users = total_users_result.scalar()
        
        admin_text = (
            f"üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
            f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            f"/add_word - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n"
            f"/list_words - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤\n"
            f"/delete_word - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
            f"/word_stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤\n"
            f"/user_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="admin_add_word")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤", callback_data="admin_list_words")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="admin_delete_word")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ])
        
        await message.answer(admin_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(Command("add_word"))
async def start_add_word(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_word)

@router.message(AdminStates.waiting_for_word)
async def process_word(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    word = message.text.strip()  # –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º .lower() —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–¥–∞—Ä–µ–Ω–∏—è!
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Å–ª–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è)
    import re
    if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\-\s]+$', word) or len(word) < 2:
        await message.answer("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    async for session in get_session():
        existing_query = select(Word).where(Word.word == word)
        existing_result = await session.execute(existing_query)
        existing_word = existing_result.scalar_one_or_none()
        
        if existing_word:
            await message.answer(f"‚ùå –°–ª–æ–≤–æ '{word}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
    
    await state.update_data(word=word)
    
    await message.answer(
        f"‚úÖ –°–ª–æ–≤–æ: <b>{word}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_definition)

@router.message(AdminStates.waiting_for_definition)
async def process_definition(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    definition = message.text.strip()
    
    if len(definition) < 5:
        await message.answer("‚ùå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(definition=definition)
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ—Ä—Ñ–µ–º—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üåø {MORPHEME_TYPES['roots']}", callback_data="morpheme_roots")],
        [InlineKeyboardButton(text=f"üî§ {MORPHEME_TYPES['prefixes']}", callback_data="morpheme_prefixes")],
        [InlineKeyboardButton(text=f"üîö {MORPHEME_TYPES['endings']}", callback_data="morpheme_endings")],
        [InlineKeyboardButton(text=f"‚úçÔ∏è {MORPHEME_TYPES['spelling']}", callback_data="morpheme_spelling")],
        [InlineKeyboardButton(text=f"üìù {MORPHEME_TYPES['n_nn']}", callback_data="morpheme_n_nn")],
        [InlineKeyboardButton(text=f"üîß {MORPHEME_TYPES['suffix']}", callback_data="morpheme_suffix")],
        [InlineKeyboardButton(text=f"üéµ {MORPHEME_TYPES['stress']}", callback_data="morpheme_stress")],
        [InlineKeyboardButton(text=f"üö´ {MORPHEME_TYPES['ne_particle']}", callback_data="morpheme_ne_particle")]
    ])
    
    await message.answer(
        f"‚úÖ –°–ª–æ–≤–æ: <b>{data['word']}</b>\n"
        f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: <b>{definition}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ—Ä—Ñ–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.set_state(AdminStates.waiting_for_morpheme_type)

@router.callback_query(F.data.startswith("morpheme_"))
async def process_morpheme_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ—Ä—Ñ–µ–º—ã"""
    morpheme_type = callback.data.replace("morpheme_", "")
    
    if morpheme_type not in MORPHEME_TYPES:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–æ—Ä—Ñ–µ–º—ã")
        return
    
    await state.update_data(morpheme_type=morpheme_type)
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ", callback_data="add_explanation")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ", callback_data="skip_explanation")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ –°–ª–æ–≤–æ: <b>{data['word']}</b>\n"
        f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: <b>{data['definition']}</b>\n"
        f"‚úÖ –¢–∏–ø –º–æ—Ä—Ñ–µ–º—ã: <b>{MORPHEME_TYPES[morpheme_type]}</b>\n\n"
        f"–ù—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ?\n"
        f"(–ü–æ—è—Å–Ω–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ '–∫–æ–º–ø–∞–Ω–∏—è - –∫–∞–º–ø–∞–Ω–∏—è')",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "add_explanation")
async def request_explanation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ —Å–ª–æ–≤—É"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Å–ª–æ–≤—É:\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: '–ö–æ–º–ø–∞–Ω–∏—è (–≥—Ä—É–ø–ø–∞ –ª—é–¥–µ–π) - –∫–∞–º–ø–∞–Ω–∏—è (–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ)'</i>",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_explanation)
    await callback.answer()

@router.callback_query(F.data == "skip_explanation")
async def skip_explanation(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –ø–æ—è—Å–Ω–µ–Ω–∏—è"""
    await state.update_data(explanation="")
    await continue_to_pattern(callback.message, state)
    await callback.answer()

@router.message(AdminStates.waiting_for_explanation)
async def process_explanation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ —Å–ª–æ–≤—É"""
    explanation = message.text.strip()
    
    if len(explanation) < 3:
        await message.answer("‚ùå –ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    await state.update_data(explanation=explanation)
    await continue_to_pattern(message, state)

async def continue_to_pattern(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–∞"""
    data = await state.get_data()
    word = data['word']
    
    example_pattern = word[:2] + '_' * (len(word)-4) + word[-2:] if len(word) > 4 else word[0] + '_' * (len(word)-2) + word[-1]
    
    summary_text = (
        f"‚úÖ –°–ª–æ–≤–æ: <b>{word}</b>\n"
        f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: <b>{data['definition']}</b>\n"
        f"‚úÖ –¢–∏–ø –º–æ—Ä—Ñ–µ–º—ã: <b>{MORPHEME_TYPES[data['morpheme_type']]}</b>\n"
    )
    
    if data.get('explanation'):
        summary_text += f"‚úÖ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: <b>{data['explanation']}</b>\n"
    
    summary_text += (
        f"\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ '_' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤.\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä:</b> –¥–ª—è —Å–ª–æ–≤–∞ '{word}' –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '{example_pattern}'\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —à–∞–±–ª–æ–Ω:"
    )
    
    await message.answer(summary_text, parse_mode="HTML")
    await state.set_state(AdminStates.waiting_for_pattern)

@router.message(AdminStates.waiting_for_pattern)
async def process_pattern(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤"""
    pattern = message.text.strip().lower()
    data = await state.get_data()
    word = data['word']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —à–∞–±–ª–æ–Ω–∞ —É–±—Ä–∞–Ω–∞ - –∞–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –≤–≤–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (–¥–ª—è —Ç–∏–ø–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–±–∫–∏ –≤–º–µ—Å—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π)
    morpheme_type = data.get('morpheme_type', '')
    if morpheme_type == 'spelling':
        if '(' not in pattern or ')' not in pattern:
            await message.answer("‚ùå –î–ª—è —Å–ª–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∫–æ–±–∫–∏ –≤–æ–∫—Ä—É–≥ —Å–ø–æ—Ä–Ω–æ–π —á–∞—Å—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: (–ø–æ)—Ö–æ—Ä–æ—à–µ–º—É")
            return
    elif morpheme_type == 'stress':
        if '(' not in pattern or ')' not in pattern:
            await message.answer("‚ùå –î–ª—è —Å–ª–æ–≤ —Å —É–¥–∞—Ä–µ–Ω–∏—è–º–∏ —à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∫–æ–±–∫–∏ –≤–æ–∫—Ä—É–≥ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —É–¥–∞—Ä–Ω—ã—Ö –±—É–∫–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å(–ò)–≤(–ï)–µ")
            return
    elif morpheme_type == 'ne_particle':
        if '(' not in pattern or ')' not in pattern:
            await message.answer("‚ùå –î–ª—è —Å–ª–æ–≤ —Å —á–∞—Å—Ç–∏—Ü–µ–π –ù–ï —à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∫–æ–±–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: (–Ω–µ)–∫—Ä–∞—Å–∏–≤—ã–π")
            return
    else:
        if '_' not in pattern:
            await message.answer("‚ùå –í —à–∞–±–ª–æ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–ø—É—Å–∫ '_'.")
            return
    
    await state.update_data(pattern=pattern)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –±—É–∫–≤—ã –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã (–¥–ª—è —Å–ª–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    morpheme_type = data.get('morpheme_type', '')
    if morpheme_type == 'spelling':
        # –î–ª—è —Å–ª–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Å –ø—É—Å—Ç—ã–º–∏ —Å–∫—Ä—ã—Ç—ã–º–∏ –±—É–∫–≤–∞–º–∏
        await state.update_data(hidden_letters="")
        await message.answer(
            f"‚úÖ –°–ª–æ–≤–æ: <b>{word}</b>\n"
            f"‚úÖ –®–∞–±–ª–æ–Ω: <b>{pattern.upper()}</b>\n\n"
            f"–î–ª—è —Å–ª–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª–µ '—Å–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.\n"
            f"–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-5):",
            parse_mode="HTML"
        )
        await state.set_state(AdminStates.waiting_for_difficulty)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã
        hidden_letters = ""
        for i, char in enumerate(pattern):
            if char == '_':
                hidden_letters += word[i]
        
        await message.answer(
            f"‚úÖ –°–ª–æ–≤–æ: <b>{word}</b>\n"
            f"‚úÖ –®–∞–±–ª–æ–Ω: <b>{pattern.upper()}</b>\n"
            f"‚úÖ –°–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã: <b>{hidden_letters}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã —Ç–æ—á–Ω–æ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –æ–Ω–∏ –∏–¥—É—Ç –≤ —Å–ª–æ–≤–µ.\n"
            f"–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: <b>{hidden_letters}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã:",
            parse_mode="HTML"
        )
        await state.set_state(AdminStates.waiting_for_hidden_letters)

@router.message(AdminStates.waiting_for_hidden_letters)
async def process_hidden_letters(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö –±—É–∫–≤"""
    hidden_letters = message.text.strip().lower()
    data = await state.get_data()
    word = data['word']
    pattern = data['pattern']
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ - –∞–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –≤–≤–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    
    await state.update_data(hidden_letters=hidden_letters)
    await message.answer(
        f"‚úÖ –°–ª–æ–≤–æ: <b>{word}</b>\n"
        f"‚úÖ –®–∞–±–ª–æ–Ω: <b>{pattern.upper()}</b>\n"
        f"‚úÖ –°–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã: <b>{hidden_letters}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-5):",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_difficulty)

@router.message(AdminStates.waiting_for_difficulty)
async def process_difficulty(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    try:
        difficulty = int(message.text.strip())
        if difficulty < 1 or difficulty > 5:
            await message.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ
    async for session in get_session():
        new_word = Word(
            word=data['word'],
            definition=data['definition'],
            explanation=data.get('explanation', ''),
            morpheme_type=data['morpheme_type'],
            puzzle_pattern=data['pattern'],
            hidden_letters=data['hidden_letters'],
            difficulty_level=difficulty
        )
        session.add(new_word)
        await session.commit()
        await session.refresh(new_word)
        
        success_text = (
            f"‚úÖ <b>–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üìù –°–ª–æ–≤–æ: <b>{new_word.word}</b>\n"
            f"üìñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: <b>{new_word.definition}</b>\n"
            f"üî§ –¢–∏–ø –º–æ—Ä—Ñ–µ–º—ã: <b>{MORPHEME_TYPES[new_word.morpheme_type]}</b>\n"
        )
        
        if new_word.explanation:
            success_text += f"üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: <b>{new_word.explanation}</b>\n"
            
        success_text += (
            f"üß© –®–∞–±–ª–æ–Ω: <b>{new_word.puzzle_pattern.upper()}</b>\n"
            f"üî§ –°–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã: <b>{new_word.hidden_letters}</b>\n"
            f"‚≠ê –°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>{new_word.difficulty_level}/5</b>\n"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–ª–æ–≤–æ", callback_data="admin_add_word")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        await message.answer(success_text, parse_mode="HTML", reply_markup=keyboard)
        await state.clear()

@router.callback_query(F.data == "admin_add_word")
async def callback_add_word(callback: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–ª–±—ç–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_word)
    await callback.answer()

@router.callback_query(F.data == "admin_panel")
async def callback_admin_panel(callback: CallbackQuery):
    """–ö–æ–ª–ª–±—ç–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await admin_panel_callback(callback) 

async def admin_panel_callback(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ callback"""
    async for session in get_session():
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_words_query = select(func.count(Word.id))
        total_words_result = await session.execute(total_words_query)
        total_words = total_words_result.scalar()
        
        total_users_query = select(func.count(User.id))
        total_users_result = await session.execute(total_users_query)
        total_users = total_users_result.scalar()
        
        admin_text = (
            f"üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
            f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            f"/add_word - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n"
            f"/list_words - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤\n"
            f"/delete_word - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
            f"/word_stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤\n"
            f"/user_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="admin_add_word")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤", callback_data="admin_list_words")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="admin_delete_word")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ])
        
        await callback.message.edit_text(admin_text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer() 