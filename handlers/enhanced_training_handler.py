from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func

from database.database import get_session
from database.models import User, Word, TrainingSession, TrainingAnswer
from services.word_service import WordService
from services.support_phrases_service import support_phrases_service
from services.leveling_service import leveling_service
from typing import Dict, List
from aiogram.filters import Command
from config import MORPHEME_TYPES
from datetime import datetime

router = Router()

class TrainingStates(StatesGroup):
    choosing_morpheme_type = State()
    waiting_for_answer = State()
    waiting_for_spelling_choice = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
training_data: Dict[int, Dict] = {}

@router.message(F.text == "üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_training(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –º–æ—Ä—Ñ–µ–º—ã"""
    user_id = message.from_user.id
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (25 —Å–ª–æ–≤)", callback_data="quick_training")],
            [InlineKeyboardButton(text="‚öôÔ∏è –¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="custom_training")]
        ])
        
        await message.answer(
            "üéØ <b>–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
            "‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</b> - —Å–º–µ—à–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ 25 —Å–ª–æ–≤\n"
            "‚öôÔ∏è <b>–¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b> - –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤, —Ç–∏–ø–∞ –º–æ—Ä—Ñ–µ–º –∏ —Ä–µ–∂–∏–º–∞\n\n"
            "–ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await state.set_state(TrainingStates.choosing_morpheme_type)

@router.callback_query(F.data == "quick_training")
async def process_quick_training(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (25 —Å–ª–æ–≤, —Å–º–µ—à–∞–Ω–Ω–∞—è)"""
    user_id = callback.from_user.id
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (25 —Å–ª–æ–≤)
        words = await WordService.get_training_words(session, user.id, 25)
        training_type_name = "–ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (—Å–º–µ—à–∞–Ω–Ω–∞—è)"
        
        if not words:
            await callback.message.edit_text(
                "üìö –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞.",
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        training_session = TrainingSession(
            user_id=user.id,
            session_type='quick_training_mixed',
            words_total=len(words)
        )
        session.add(training_session)
        await session.commit()
        await session.refresh(training_session)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        training_data[user_id] = {
            'words': words,
            'current_word_index': 0,
            'correct_answers': 0,
            'incorrect_words': [],
            'answers': [],
            'training_type_name': training_type_name,
            'session_id': training_session.id
        }
        
        await send_next_word_callback(callback, user_id, state)

@router.callback_query(F.data == "custom_training")
async def process_custom_training(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è (10 —Å–ª–æ–≤)", callback_data="word_count_10")],
        [InlineKeyboardButton(text="üìö –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (25 —Å–ª–æ–≤)", callback_data="word_count_25")],
        [InlineKeyboardButton(text="üî• –ö–æ–ª–æ—Å—Å–∞–ª—å–Ω–∞—è (50 —Å–ª–æ–≤)", callback_data="word_count_50")]
    ])
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤</b>\n\n"
        "‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è (10 —Å–ª–æ–≤)</b> - –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –ª—é–¥–µ–π\n"
        "üìö <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (25 —Å–ª–æ–≤)</b> - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n"
        "üî• <b>–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω–∞—è (50 —Å–ª–æ–≤)</b> - –¥–ª—è —Å—É–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("word_count_"))
async def process_word_count_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤"""
    word_count = int(callback.data.replace("word_count_", ""))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(word_count=word_count)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üåø {MORPHEME_TYPES['roots']}", callback_data="training_roots")],
        [InlineKeyboardButton(text=f"üî§ {MORPHEME_TYPES['prefixes']}", callback_data="training_prefixes")],
        [InlineKeyboardButton(text=f"üîö {MORPHEME_TYPES['endings']}", callback_data="training_endings")],
        [InlineKeyboardButton(text=f"‚úçÔ∏è {MORPHEME_TYPES['spelling']}", callback_data="training_spelling")],
        [InlineKeyboardButton(text=f"üìù {MORPHEME_TYPES['n_nn']}", callback_data="training_n_nn")],
        [InlineKeyboardButton(text=f"üî§ {MORPHEME_TYPES['suffix']}", callback_data="training_suffix")],
        [InlineKeyboardButton(text=f"üéµ {MORPHEME_TYPES['stress']}", callback_data="training_stress")],
        [InlineKeyboardButton(text=f"üö´ {MORPHEME_TYPES['ne_particle']}", callback_data="training_ne_particle")],
        [InlineKeyboardButton(text="üåà –°–º–µ—à–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="training_mixed")]
    ])
    
    count_text = {10: "‚ö° –ë—ã—Å—Ç—Ä–∞—è", 25: "üìö –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", 50: "üî• –ö–æ–ª–æ—Å—Å–∞–ª—å–Ω–∞—è"}
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {count_text.get(word_count, str(word_count))} ({word_count} —Å–ª–æ–≤)\n\n"
        f"üéØ <b>–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("training_"))
async def process_morpheme_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ—Ä—Ñ–µ–º—ã"""
    morpheme_type = callback.data.replace("training_", "")
    user_id = callback.from_user.id
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        word_count = user_data.get('word_count', 25)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if morpheme_type == "mixed":
            words = await WordService.get_training_words(session, user.id, word_count)
            training_type_name = "–°–º–µ—à–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
        else:
            words = await WordService.get_training_words_by_morpheme(session, user.id, morpheme_type, word_count)
            training_type_name = MORPHEME_TYPES.get(morpheme_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        
        if not words:
            await callback.message.edit_text(
                f"üìö –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–∞ '{training_type_name}'.\n"
                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.",
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        training_session = TrainingSession(
            user_id=user.id,
            session_type=f'training_{morpheme_type}',
            words_total=len(words)
        )
        session.add(training_session)
        await session.commit()
        await session.refresh(training_session)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        training_data[user_id] = {
            'session_id': training_session.id,
            'words': words,
            'current_word_index': 0,
            'correct_answers': 0,
            'incorrect_words': [],
            'answers': [],
            'morpheme_type': morpheme_type,
            'training_type_name': training_type_name
        }
        
        await send_next_word_callback(callback, user_id, state)

@router.callback_query(F.data.startswith("spelling_answer_"))
async def process_spelling_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è"""
    callback_parts = callback.data.split("_", 4)  # spelling_answer_{user_id}_{option_index}_{option_text}
    if len(callback_parts) < 5:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    user_id = int(callback_parts[2])
    chosen_option = "_".join(callback_parts[4:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
    
    if user_id not in training_data:
        await callback.message.edit_text("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
        return
    
    data = training_data[user_id]
    correct_answer = data['current_correct_answer']
    current_word = data['current_word']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if current_word.morpheme_type == 'stress':
        # –î–ª—è —É–¥–∞—Ä–µ–Ω–∏–π —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ (—Å —É—á–µ—Ç–æ–º —É–¥–∞—Ä–µ–Ω–∏–π)
        is_correct = chosen_option.strip() == correct_answer.strip()
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        is_correct = chosen_option.strip().lower() == correct_answer.strip().lower()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answer_data = {
        'word': current_word,
        'user_answer': chosen_option,
        'correct_answer': correct_answer,
        'is_correct': is_correct
    }
    data['answers'].append(answer_data)
    
    if is_correct:
        data['correct_answers'] += 1
        result_text = f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n" \
                     f"–û—Ç–≤–µ—Ç: <b>{chosen_option}</b>"
    else:
        data['incorrect_words'].append(current_word)
        result_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n" \
                     f"–í–∞—à –æ—Ç–≤–µ—Ç: <b>{chosen_option}</b>\n" \
                     f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    data['current_word_index'] += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    await callback.message.edit_text(result_text, parse_mode="HTML")
    await callback.answer()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    await send_next_word_callback(callback, user_id, state)



async def send_next_word_callback(callback: CallbackQuery, user_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤–µ—Ä—Å–∏—è –¥–ª—è callback)"""
    if user_id not in training_data:
        await callback.message.edit_text("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
        return
    
    data = training_data[user_id]
    current_index = data['current_word_index']
    
    if current_index >= len(data['words']):
        await finish_training_callback(callback, user_id)
        return
    
    word = data['words'][current_index]
    puzzle, correct_answer = WordService.create_word_puzzle(word)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    data['current_correct_answer'] = correct_answer
    data['current_word'] = word
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    question_text = (
        f"üéØ <b>{data['training_type_name']}</b>\n\n"
        f"üìù <b>–°–ª–æ–≤–æ {current_index + 1} –∏–∑ {len(data['words'])}</b>\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    if word.definition:
        question_text += f"üìñ <b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b> {word.definition}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º puzzle —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –≤ —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    if word.explanation:
        puzzle_with_explanation = f"{puzzle} (<u>{word.explanation}</u>)"
    else:
        puzzle_with_explanation = puzzle
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ—Ä—Ñ–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if word.morpheme_type in ['spelling', 'stress', 'ne_particle']:
        # –î–ª—è —Ç–∏–ø–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        type_icons = {
            'spelling': '‚úçÔ∏è',
            'stress': 'üî§',
            'ne_particle': 'üö´'
        }
        type_labels = {
            'spelling': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?',
            'stress': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?',
            'ne_particle': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?'
        }
        
        icon = type_icons.get(word.morpheme_type, '‚úçÔ∏è')
        label = type_labels.get(word.morpheme_type, '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?')
        
        question_text += (
            f"{icon} <b>{label}</b>\n"
            f"<code>{puzzle_with_explanation}</code>\n\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = WordService.create_options_for_word(word)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for i, option in enumerate(options):
            button = InlineKeyboardButton(
                text=option, 
                callback_data=f"spelling_answer_{user_id}_{i}_{option}"
            )
            keyboard.inline_keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        finish_button = InlineKeyboardButton(
            text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", 
            callback_data="finish_training_request"
        )
        keyboard.inline_keyboard.append([finish_button])
        
        await callback.message.edit_text(question_text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(TrainingStates.waiting_for_spelling_choice)
        
    else:
        # –î–ª—è —Ç–∏–ø–æ–≤ —Å –≤–≤–æ–¥–æ–º –±—É–∫–≤ (roots, prefixes, endings, n_nn, suffix)
        question_text += f"<code>{puzzle_with_explanation}</code>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish_training_request")]
        ])
        
        await callback.message.edit_text(question_text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(TrainingStates.waiting_for_answer)
    
    await callback.answer()

async def send_next_word(message: Message, user_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if user_id not in training_data:
        await message.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
        return
    
    data = training_data[user_id]
    current_index = data['current_word_index']
    
    if current_index >= len(data['words']):
        await finish_training(message, user_id)
        return
    
    word = data['words'][current_index]
    puzzle, correct_answer = WordService.create_word_puzzle(word)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    data['current_correct_answer'] = correct_answer
    data['current_word'] = word
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    question_text = (
        f"üéØ <b>{data['training_type_name']}</b>\n\n"
        f"üìù <b>–°–ª–æ–≤–æ {current_index + 1} –∏–∑ {len(data['words'])}</b>\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    if word.definition:
        question_text += f"üìñ <b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b> {word.definition}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º puzzle —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –≤ —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    if word.explanation:
        puzzle_with_explanation = f"{puzzle} (<u>{word.explanation}</u>)"
    else:
        puzzle_with_explanation = puzzle
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ—Ä—Ñ–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if word.morpheme_type in ['spelling', 'stress', 'ne_particle']:
        # –î–ª—è —Ç–∏–ø–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        type_icons = {
            'spelling': '‚úçÔ∏è',
            'stress': 'üî§',
            'ne_particle': 'üö´'
        }
        type_labels = {
            'spelling': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?',
            'stress': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?',
            'ne_particle': '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?'
        }
        
        icon = type_icons.get(word.morpheme_type, '‚úçÔ∏è')
        label = type_labels.get(word.morpheme_type, '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?')
        
        question_text += (
            f"{icon} <b>{label}</b>\n"
            f"<code>{puzzle_with_explanation}</code>\n\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = WordService.create_options_for_word(word)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for i, option in enumerate(options):
            button = InlineKeyboardButton(
                text=option, 
                callback_data=f"spelling_answer_{user_id}_{i}_{option}"
            )
            keyboard.inline_keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        finish_button = InlineKeyboardButton(
            text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", 
            callback_data="finish_training_request"
        )
        keyboard.inline_keyboard.append([finish_button])
        
        await message.answer(question_text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(TrainingStates.waiting_for_spelling_choice)
        
    else:
        # –î–ª—è —Ç–∏–ø–æ–≤ —Å –≤–≤–æ–¥–æ–º –±—É–∫–≤ (roots, prefixes, endings, n_nn, suffix)
        question_text += f"<code>{puzzle_with_explanation}</code>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish_training_request")]
        ])
        
        await message.answer(question_text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(TrainingStates.waiting_for_answer)

@router.message(TrainingStates.waiting_for_answer)
async def process_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if user_id not in training_data:
        await message.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
        await state.clear()
        return
    
    data = training_data[user_id]
    user_answer = message.text.strip()
    correct_answer = data['current_correct_answer']
    current_word = data['current_word']
    
    is_correct = WordService.check_answer("", user_answer, correct_answer)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answer_data = {
        'word': current_word,
        'user_answer': user_answer,
        'correct_answer': correct_answer,
        'is_correct': is_correct
    }
    data['answers'].append(answer_data)
    
    if is_correct:
        data['correct_answers'] += 1
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        async for session in get_session():
            user_query = select(User).where(User.telegram_id == user_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            if user:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞
                difficulty = getattr(current_word, 'difficulty_level', 1)
                streak = data['correct_answers'] - 1  # –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                experience_reward = leveling_service.calculate_experience_reward(difficulty, streak)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                level_up, new_level = await leveling_service.add_experience(session, user, experience_reward)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
                if level_up:
                    level_name = leveling_service.get_level_name(new_level)
                    await message.answer(
                        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                        f"üÜô –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!\n"
                        f"üèÜ <b>–£—Ä–æ–≤–µ–Ω—å {new_level}:</b> {level_name}\n"
                        f"‚≠ê +{experience_reward} –æ–ø—ã—Ç–∞",
                        parse_mode="HTML"
                    )
    else:
        data['incorrect_words'].append(current_word)
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>", parse_mode="HTML")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    data['current_word_index'] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é —Ñ—Ä–∞–∑—É (–∫–∞–∂–¥—ã–µ 3 —Å–ª–æ–≤–∞ –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
    if is_correct and support_phrases_service.should_show_support_phrase(data['current_word_index']):
        support_message = support_phrases_service.get_support_message()
        await message.answer(support_message)
    
    await send_next_word(message, user_id, state)

async def finish_training(message: Message, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if user_id not in training_data:
        return
    
    data = training_data[user_id]
    
    async for session in get_session():
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        session_query = select(TrainingSession).where(TrainingSession.id == data['session_id'])
        training_session_result = await session.execute(session_query)
        training_session = training_session_result.scalar_one()
        
        training_session.words_correct = data['correct_answers']
        training_session.words_incorrect = len(data['incorrect_words'])
        training_session.completed_at = datetime.utcnow()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
        for answer_data in data['answers']:
            training_answer = TrainingAnswer(
                session_id=training_session.id,
                word_id=answer_data['word'].id,
                user_answer=answer_data['user_answer'],
                is_correct=answer_data['is_correct']
            )
            session.add(training_answer)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞ (—Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
            await WordService.update_word_progress(
                session, 
                training_session.user_id, 
                answer_data['word'].id, 
                answer_data['is_correct']
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one()
        
        for incorrect_word in data['incorrect_words']:
            await WordService.add_word_to_user_dictionary(session, user.id, incorrect_word.id)
        
        await session.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    accuracy = (data['correct_answers'] / len(data['words'])) * 100
    
    result_text = (
        f"üéâ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ '{data['training_type_name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: <b>{data['correct_answers']}</b> –∏–∑ <b>{len(data['words'])}</b>\n"
        f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: <b>{accuracy:.1f}%</b>\n\n"
    )
    
    if data['incorrect_words']:
        result_text += f"üìö <b>–°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:</b>\n"
        for word in data['incorrect_words']:
            result_text += f"‚Ä¢ {word.word}\n"
        result_text += f"\nüîî –≠—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö –ø–æ —Å–∏—Å—Ç–µ–º–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π."
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –æ—à–∏–±–∫–∞—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        if data.get('training_mode', 'new') not in ['learned', 'error']:
            result_text += f"\n\nüí™ <b>–•–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö?</b>\n"
            result_text += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üî• –î–∞, –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö", callback_data="start_error_training")],
                [InlineKeyboardButton(text="üèÅ –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="decline_error_training")]
            ])
            
            await message.answer(result_text, parse_mode="HTML", reply_markup=keyboard)
            # –ù–ï –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö
            return
    else:
        result_text += f"üèÜ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!</b>"
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –∏–ª–∏ —ç—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∞—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="start_training_new")],
        [InlineKeyboardButton(text="üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="my_dictionary")]
    ])
    
    await message.answer(result_text, parse_mode="HTML", reply_markup=keyboard)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    del training_data[user_id]

async def finish_training_callback(callback: CallbackQuery, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤–µ—Ä—Å–∏—è –¥–ª—è callback)"""
    if user_id not in training_data:
        return
    
    data = training_data[user_id]
    
    async for session in get_session():
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        session_query = select(TrainingSession).where(TrainingSession.id == data['session_id'])
        training_session_result = await session.execute(session_query)
        training_session = training_session_result.scalar_one()
        
        training_session.words_correct = data['correct_answers']
        training_session.words_incorrect = len(data['incorrect_words'])
        training_session.completed_at = datetime.utcnow()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        for answer_data in data['answers']:
            training_answer = TrainingAnswer(
                session_id=training_session.id,
                word_id=answer_data['word'].id,
                user_answer=answer_data['user_answer'],
                is_correct=answer_data['is_correct']
            )
            session.add(training_answer)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one()
        
        for incorrect_word in data['incorrect_words']:
            await WordService.add_word_to_user_dictionary(session, user.id, incorrect_word.id)
        
        await session.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    accuracy = (data['correct_answers'] / len(data['words'])) * 100
    
    result_text = (
        f"üéâ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ '{data['training_type_name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: <b>{data['correct_answers']}</b> –∏–∑ <b>{len(data['words'])}</b>\n"
        f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: <b>{accuracy:.1f}%</b>\n\n"
    )
    
    if data['incorrect_words']:
        result_text += f"üìö <b>–°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:</b>\n"
        for word in data['incorrect_words']:
            result_text += f"‚Ä¢ {word.word}\n"
        result_text += f"\nüîî –≠—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö –ø–æ —Å–∏—Å—Ç–µ–º–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π."
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –æ—à–∏–±–∫–∞—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        if data.get('training_mode', 'new') not in ['learned', 'error']:
            result_text += f"\n\nüí™ <b>–•–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö?</b>\n"
            result_text += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üî• –î–∞, –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö", callback_data="start_error_training")],
                [InlineKeyboardButton(text="üèÅ –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="decline_error_training")]
            ])
            
            await callback.message.edit_text(result_text, parse_mode="HTML", reply_markup=keyboard)
            # –ù–ï –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö
            return
        
    else:
        result_text += f"üèÜ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!</b>"
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –∏–ª–∏ —ç—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∞—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="start_training_new")],
        [InlineKeyboardButton(text="üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="my_dictionary")]
    ])
    
    await callback.message.edit_text(result_text, parse_mode="HTML", reply_markup=keyboard)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    del training_data[user_id]

@router.callback_query(F.data == "start_training_new")
async def start_training_new(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ—Ä—Ñ–µ–º—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üåø {MORPHEME_TYPES['roots']}", callback_data="training_roots")],
        [InlineKeyboardButton(text=f"üî§ {MORPHEME_TYPES['prefixes']}", callback_data="training_prefixes")],
        [InlineKeyboardButton(text=f"üîö {MORPHEME_TYPES['endings']}", callback_data="training_endings")],
        [InlineKeyboardButton(text=f"‚úçÔ∏è {MORPHEME_TYPES['spelling']}", callback_data="training_spelling")],
        [InlineKeyboardButton(text="üé≤ –°–º–µ—à–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="training_mixed")]
    ])
    
    await callback.message.edit_text(
        "üéØ <b>–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–∏–ø –º–æ—Ä—Ñ–µ–º—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await state.set_state(TrainingStates.choosing_morpheme_type)
    await callback.answer()

@router.callback_query(F.data == "finish_training_request")
async def request_finish_training(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    user_id = callback.from_user.id
    
    if user_id not in training_data:
        await callback.message.edit_text("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
        await callback.answer()
        return
    
    data = training_data[user_id]
    current_index = data['current_word_index']
    total_words = len(data['words'])
    
    confirmation_text = (
        f"‚ö†Ô∏è <b>–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
        f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ: <b>{current_index}</b> –∏–∑ <b>{total_words}</b> —Å–ª–æ–≤\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: <b>{data['correct_answers']}</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–π—á–∞—Å?\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_training"),
            InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="confirm_finish_training")
        ]
    ])
    
    await callback.message.edit_text(confirmation_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "continue_training")
async def continue_training(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    await send_next_word_callback(callback, user_id, state)

@router.callback_query(F.data == "confirm_finish_training")
async def confirm_finish_training(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = callback.from_user.id
    await finish_training_callback(callback, user_id)

@router.callback_query(F.data == "start_error_training")
async def start_error_training(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö"""
    user_id = callback.from_user.id
    
    if user_id not in training_data:
        await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return
    
    data = training_data[user_id]
    incorrect_words = data['incorrect_words']
    
    if not incorrect_words:
        await callback.message.edit_text("‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö.")
        await callback.answer()
        return
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—à–∏–±–æ–∫
        error_training_session = TrainingSession(
            user_id=user.id,
            session_type='error_training',
            words_total=len(incorrect_words)
        )
        session.add(error_training_session)
        await session.commit()
        await session.refresh(error_training_session)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö
        training_data[user_id] = {
            'session_id': error_training_session.id,
            'words': incorrect_words,
            'current_word_index': 0,
            'correct_answers': 0,
            'incorrect_words': [],
            'answers': [],
            'morpheme_type': 'error_training',
            'training_type_name': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∞—Ö',
            'training_mode': 'error'
        }
        
        await send_next_word_callback(callback, user_id, state)

@router.callback_query(F.data == "decline_error_training")
async def decline_error_training(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–∞–∑ –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö"""
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="start_training_new")],
        [InlineKeyboardButton(text="üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="my_dictionary")]
    ])
    
    await callback.message.edit_text(
        "üéâ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML", 
        reply_markup=keyboard
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if user_id in training_data:
        del training_data[user_id]
    
    await callback.answer()

@router.message(Command("training"))
async def cmd_training(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await start_training(message, state) 