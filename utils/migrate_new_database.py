#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π –±–æ—Ç–∞
"""

import sqlite3
import os
from datetime import datetime

def migrate_new_database():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "vocabulary_bot.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö vocabulary_bot.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    print("üîÑ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ù–û–í–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
    backup_path = f"vocabulary_bot_backup_before_migration_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    try:
        # –°–æ–∑–¥–∞–µ–º backup
        print(f"üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø: {backup_path}")
        
        import shutil
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("PRAGMA table_info(users)")
        existing_columns = [column[1] for column in cursor.fetchall()]
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {existing_columns}")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        required_fields = [
            ("experience_points", "INTEGER DEFAULT 0"),
            ("level", "INTEGER DEFAULT 1"), 
            ("current_streak", "INTEGER DEFAULT 0"),
            ("best_streak", "INTEGER DEFAULT 0"),
            ("last_training_date", "DATE")
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        for field_name, field_definition in required_fields:
            if field_name not in existing_columns:
                print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ {field_name}...")
                cursor.execute(f"ALTER TABLE users ADD COLUMN {field_name} {field_definition}")
                print(f"‚úÖ –ü–æ–ª–µ {field_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_words (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤)
        cursor.execute("PRAGMA table_info(user_words)")
        user_words_columns = [column[1] for column in cursor.fetchall()]
        
        if 'correct_answers_count' not in user_words_columns:
            print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ correct_answers_count –≤ —Ç–∞–±–ª–∏—Ü—É user_words...")
            cursor.execute("ALTER TABLE user_words ADD COLUMN correct_answers_count INTEGER DEFAULT 0")
            print(f"‚úÖ –ü–æ–ª–µ correct_answers_count –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("PRAGMA table_info(users)")
        all_columns = [column[1] for column in cursor.fetchall()]
        print(f"üìã –í—Å–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {all_columns}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM words")
        words_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users") 
        users_count = cursor.fetchone()[0]
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –ú–ò–ì–†–ê–¶–ò–ò:")
        print(f"   üìö –°–ª–æ–≤ –≤ –ë–î: {words_count}")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {users_count}")
        
        conn.close()
        
        print(f"\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"üéØ –¢–µ–ø–µ—Ä—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π –±–æ—Ç–∞!")
        print(f"üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {backup_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists(backup_path):
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞...")
            try:
                shutil.copy2(backup_path, db_path)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞")
            except:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞")
                
        return False

if __name__ == "__main__":
    success = migrate_new_database()
    if success:
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π –±–æ—Ç–∞!")
        print("üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: python main.py")
    else:
        print("\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
