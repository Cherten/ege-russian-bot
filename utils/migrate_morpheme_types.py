import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from database.database import get_session

async def migrate_morpheme_types():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π explanation –∏ morpheme_type"""
    
    async for session in get_session():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —Å—Ç–æ–ª–±—Ü—ã
            result = await session.execute(text("PRAGMA table_info(words);"))
            columns = result.fetchall()
            column_names = [col[1] for col in columns]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü explanation, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'explanation' not in column_names:
                await session.execute(text("ALTER TABLE words ADD COLUMN explanation TEXT;"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'explanation'")
            else:
                print("‚ÑπÔ∏è –°—Ç–æ–ª–±–µ—Ü 'explanation' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü morpheme_type, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'morpheme_type' not in column_names:
                await session.execute(text("ALTER TABLE words ADD COLUMN morpheme_type VARCHAR(50) NOT NULL DEFAULT 'roots';"))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'morpheme_type'")
            else:
                print("‚ÑπÔ∏è –°—Ç–æ–ª–±–µ—Ü 'morpheme_type' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            await session.commit()
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            await session.rollback()
            raise

async def main():
    print("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∏–ø–æ–≤ –º–æ—Ä—Ñ–µ–º...\n")
    await migrate_morpheme_types()

if __name__ == "__main__":
    asyncio.run(main()) 