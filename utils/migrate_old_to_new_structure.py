import asyncio
import os
import sys
import sqlite3
import shutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from database.database import get_session

async def migrate_old_to_new_structure():
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –°–¢–ê–†–û–ô –ë–ê–ó–´ –ö –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–ï")
    print("="*60)
    
    db_path = "../vocabulary_bot.db"
    backup_path = f"../vocabulary_bot_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if os.path.exists(db_path):
            shutil.copy2(db_path, backup_path)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {os.path.basename(backup_path)}")
        else:
            print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # 2. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM users;")
        users_before = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM words;")
        words_before = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_words;")
        user_words_before = cursor.fetchone()[0]
        
        print(f"\nüìä –î–∞–Ω–Ω—ã–µ –î–û –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_before}")
        print(f"   üìö –°–ª–æ–≤: {words_before}")
        print(f"   üîó –°–≤—è–∑–µ–π user_words: {user_words_before}")
        
        conn.close()
        
        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ SQLAlchemy
        async for session in get_session():
            print(f"\nüîß –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π...")
            
            # 3.1. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É words
            print("   üìù –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ 'explanation' –≤ —Ç–∞–±–ª–∏—Ü—É words...")
            try:
                await session.execute(text("ALTER TABLE words ADD COLUMN explanation TEXT;"))
                print("   ‚úÖ –ü–æ–ª–µ 'explanation' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print("   ‚ÑπÔ∏è  –ü–æ–ª–µ 'explanation' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    raise e
            
            print("   üìù –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ 'morpheme_type' –≤ —Ç–∞–±–ª–∏—Ü—É words...")
            try:
                await session.execute(text("ALTER TABLE words ADD COLUMN morpheme_type VARCHAR(50) NOT NULL DEFAULT 'roots';"))
                print("   ‚úÖ –ü–æ–ª–µ 'morpheme_type' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print("   ‚ÑπÔ∏è  –ü–æ–ª–µ 'morpheme_type' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    raise e
            
            # 3.2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ correct_answers_count –≤ —Ç–∞–±–ª–∏—Ü—É user_words
            print("   üìù –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ 'correct_answers_count' –≤ —Ç–∞–±–ª–∏—Ü—É user_words...")
            try:
                await session.execute(text("ALTER TABLE user_words ADD COLUMN correct_answers_count INTEGER NOT NULL DEFAULT 0;"))
                print("   ‚úÖ –ü–æ–ª–µ 'correct_answers_count' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print("   ‚ÑπÔ∏è  –ü–æ–ª–µ 'correct_answers_count' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    raise e
            
            # 3.3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            print("   üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            
            # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ words
            await session.execute(text("UPDATE words SET explanation = '' WHERE explanation IS NULL;"))
            await session.execute(text("UPDATE words SET morpheme_type = 'roots' WHERE morpheme_type IS NULL OR morpheme_type = '';"))
            
            # –î–ª—è correct_answers_count - –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            print("   üßÆ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
            query = """
            UPDATE user_words 
            SET correct_answers_count = (
                SELECT COUNT(*)
                FROM training_answers ta
                JOIN training_sessions ts ON ta.session_id = ts.id
                WHERE ts.user_id = user_words.user_id 
                AND ta.word_id = user_words.word_id 
                AND ta.is_correct = 1
            )
            WHERE correct_answers_count = 0;
            """
            await session.execute(text(query))
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ >= 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            await session.execute(text("""
                UPDATE user_words 
                SET is_learned = 1 
                WHERE correct_answers_count >= 5 AND is_learned = 0;
            """))
            
            await session.commit()
            
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM users;")
        users_after = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM words;")
        words_after = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_words;")
        user_words_after = cursor.fetchone()[0]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—è–º
        cursor.execute("SELECT COUNT(*) FROM user_words WHERE correct_answers_count > 0;")
        words_with_progress = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_words WHERE correct_answers_count >= 10;")
        auto_learned_words = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_words WHERE is_learned = 1;")
        total_learned_words = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"\nüìä –î–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_after} (–±—ã–ª–æ: {users_before})")
        print(f"   üìö –°–ª–æ–≤: {words_after} (–±—ã–ª–æ: {words_before})")
        print(f"   üîó –°–≤—è–∑–µ–π user_words: {user_words_after} (–±—ã–ª–æ: {user_words_before})")
        print(f"\nüìà –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üéØ –°–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {words_with_progress}")
        print(f"   üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—É—á–µ–Ω–Ω—ã—Ö (10+ –æ—Ç–≤–µ—Ç–æ–≤): {auto_learned_words}")
        print(f"   ‚úÖ –í—Å–µ–≥–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {total_learned_words}")
        
        if users_after == users_before and words_after == words_before and user_words_after == user_words_before:
            print(f"\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
            print(f"   ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            print(f"   ‚úÖ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞")
            print(f"\nüìö –¢–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –≤—ã—É—á–µ–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ:")
            print(f"   ‚Ä¢ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö 7 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ò–õ–ò")
            print(f"   ‚Ä¢ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö")
        else:
            print(f"\n‚ùå –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–• –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
            print(f"–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            shutil.copy2(backup_path, db_path)
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        if os.path.exists(backup_path):
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            shutil.copy2(backup_path, db_path)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        
        return False

async def main():
    print("üõ°Ô∏è  –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –°–¢–ê–†–û–ô –ë–ê–ó–´")
    print("–≠—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("‚Ä¢ –î–æ–±–∞–≤–∏—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è")  
    print("‚Ä¢ –ü–æ–¥—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    print("‚Ä¢ –ü–æ–º–µ—Ç–∏—Ç —Å–ª–æ–≤–∞ –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 5+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
    print("="*60)
    
    success = await migrate_old_to_new_structure()
    
    if success:
        print("\nüöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python main.py")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main()) 