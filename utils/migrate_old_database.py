import sqlite3
import sys
import os

def migrate_old_database(db_path):
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
    
    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã words
        cursor.execute("PRAGMA table_info(words)")
        columns = [column[1] for column in cursor.fetchall()]
        print(f"üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ words: {columns}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É explanation, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if 'explanation' not in columns:
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'explanation'...")
            cursor.execute("ALTER TABLE words ADD COLUMN explanation TEXT DEFAULT ''")
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'explanation' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ 'explanation' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É morpheme_type, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if 'morpheme_type' not in columns:
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'morpheme_type'...")
            cursor.execute("ALTER TABLE words ADD COLUMN morpheme_type TEXT DEFAULT 'roots'")
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'morpheme_type' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ 'morpheme_type' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ–º —Å–ª–æ–≤–∞–º —Ç–∏–ø "roots" (–ö–æ—Ä–Ω–∏)
        print("üåø –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ–º —Å–ª–æ–≤–∞–º —Ç–∏–ø –º–æ—Ä—Ñ–µ–º—ã 'roots'...")
        cursor.execute("UPDATE words SET morpheme_type = 'roots' WHERE morpheme_type IS NULL OR morpheme_type = ''")
        updated_rows = cursor.rowcount
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_rows} —Å–ª–æ–≤")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ NULL
        print("üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è...")
        cursor.execute("UPDATE words SET explanation = '' WHERE explanation IS NULL")
        updated_explanations = cursor.rowcount
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_explanations} –ø–æ—è—Å–Ω–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        cursor.execute("SELECT COUNT(*) FROM words")
        total_words = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –º–æ—Ä—Ñ–µ–º
        cursor.execute("SELECT morpheme_type, COUNT(*) FROM words GROUP BY morpheme_type")
        morpheme_stats = cursor.fetchall()
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}")
        print("üî§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –º–æ—Ä—Ñ–µ–º:")
        for morpheme_type, count in morpheme_stats:
            morpheme_name = {
                'roots': 'üåø –ö–æ—Ä–Ω–∏',
                'prefixes': 'üî§ –ü—Ä–∏—Å—Ç–∞–≤–∫–∏',
                'endings': 'üîö –û–∫–æ–Ω—á–∞–Ω–∏—è',
                'spelling': '‚úçÔ∏è –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ'
            }.get(morpheme_type, morpheme_type)
            print(f"   - {morpheme_name}: {count} —Å–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
        return False
    
    finally:
        conn.close()
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "vocabulary_bot.db"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(db_path):
        print(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–æ–º vocabulary_bot.db")
        sys.exit(1)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑–º–µ–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é!")
    print(f"üìÅ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {os.path.abspath(db_path)}")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç): ").lower()
    if response not in ['–¥–∞', 'yes', 'y', '–¥']:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        sys.exit(0)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrate_old_database(db_path)
    
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ —Å —ç—Ç–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /admin ‚Üí üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("3. –í—Å–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ 'üåø –ö–æ—Ä–Ω–∏'")
    else:
        print("\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main() 