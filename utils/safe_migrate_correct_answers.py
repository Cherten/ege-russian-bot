import asyncio
import os
import sys
import shutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from database.database import get_session

async def safe_migrate_correct_answers_count():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ correct_answers_count —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤...\n")
    
    db_path = "../vocabulary_bot.db"
    backup_path = f"../vocabulary_bot_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if os.path.exists(db_path):
            shutil.copy2(db_path, backup_path)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {os.path.basename(backup_path)}")
        else:
            print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        async for session in get_session():
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            result = await session.execute(text("SELECT name FROM sqlite_master WHERE type='table';"))
            tables = result.fetchall()
            table_names = [t[0] for t in tables]
            
            print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for table in table_names:
                print(f"  ‚úÖ {table}")
            
            if 'user_words' not in table_names:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ user_words –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_words
            result = await session.execute(text("PRAGMA table_info(user_words);"))
            columns = result.fetchall()
            column_names = [col[1] for col in columns]
            
            if 'correct_answers_count' in column_names:
                print("‚úÖ –ü–æ–ª–µ 'correct_answers_count' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return True
            
            print("üìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_words:")
            for column in columns:
                col_id, col_name, col_type, not_null, default_val, pk = column
                print(f"  ‚Ä¢ {col_name} ({col_type})")
            
            # 4. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
            result = await session.execute(text("SELECT COUNT(*) FROM user_words;"))
            user_words_count = result.scalar()
            
            result = await session.execute(text("SELECT COUNT(*) FROM users;"))
            users_count = result.scalar()
            
            result = await session.execute(text("SELECT COUNT(*) FROM words;"))
            words_count = result.scalar()
            
            print(f"\nüìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            print(f"   üìö –°–ª–æ–≤: {words_count}")
            print(f"   üîó –°–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å–ª–æ–≤–æ: {user_words_count}")
            
            # 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
            print("\nüîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ 'correct_answers_count'...")
            await session.execute(text(
                "ALTER TABLE user_words ADD COLUMN correct_answers_count INTEGER NOT NULL DEFAULT 0;"
            ))
            
            # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
            await session.execute(text(
                "UPDATE user_words SET correct_answers_count = 0 WHERE correct_answers_count IS NULL;"
            ))
            
            await session.commit()
            
            # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await session.execute(text("PRAGMA table_info(user_words);"))
            new_columns = result.fetchall()
            
            print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_words:")
            for column in new_columns:
                col_id, col_name, col_type, not_null, default_val, pk = column
                marker = "üÜï" if col_name == 'correct_answers_count' else "  "
                print(f"{marker} ‚Ä¢ {col_name} ({col_type})")
            
            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            result = await session.execute(text("SELECT COUNT(*) FROM user_words;"))
            final_count = result.scalar()
            
            if final_count == user_words_count:
                print(f"\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ({final_count} –∑–∞–ø–∏—Å–µ–π)")
            else:
                print(f"\n‚ùå –ü–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö! –ë—ã–ª–æ: {user_words_count}, —Å—Ç–∞–ª–æ: {final_count}")
                return False
        
        print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        print(f"üìö –¢–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –≤—ã—É—á–µ–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ:")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö 7 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ò–õ–ò")
        print(f"   ‚Ä¢ 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö")
        print(f"\nüíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {os.path.basename(backup_path)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists(backup_path):
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            shutil.copy2(backup_path, db_path)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        
        return False

async def main():
    print("üõ°Ô∏è  –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø")
    print("–≠—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è:")
    print("‚Ä¢ –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")
    print("‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
    print("‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑ –∫–æ–ø–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ")
    print("="*50)
    
    success = await safe_migrate_correct_answers_count()
    
    if success:
        print("\nüöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python main.py")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main()) 