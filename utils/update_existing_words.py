import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import select, update
from database.database import get_session
from database.models import Word

async def update_existing_words():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–≤–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∏–º —Ç–∏–ø –º–æ—Ä—Ñ–µ–º—ã 'roots' –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    
    async for session in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ —Å –ø—É—Å—Ç—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
            words_query = select(Word).where(
                (Word.definition == None) | (Word.definition == '') | (Word.definition == 'None')
            )
            words_result = await session.execute(words_query)
            words = words_result.scalars().all()
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(words)}")
            
            if not words:
                print("‚ÑπÔ∏è –í—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
            updated_count = 0
            for word in words:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                basic_definition = f"–°–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ: {word.word}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–æ
                update_query = update(Word).where(Word.id == word.id).values(
                    definition=basic_definition,
                    morpheme_type='roots',  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –º–æ—Ä—Ñ–µ–º—ã "–ö–æ—Ä–Ω–∏"
                    explanation=''  # –ü—É—Å—Ç–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ
                )
                await session.execute(update_query)
                updated_count += 1
                
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {word.word} ‚Üí {basic_definition}")
            
            await session.commit()
            print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å–ª–æ–≤(–∞)!")
            print("üìù –í—Å–µ —Å–ª–æ–≤–∞ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç:")
            print("   - –¢–∏–ø –º–æ—Ä—Ñ–µ–º—ã: –ö–æ—Ä–Ω–∏") 
            print("   - –ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
            print("   - –ü—É—Å—Ç–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤: {e}")
            await session.rollback()
            raise

async def show_words_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º –º–æ—Ä—Ñ–µ–º"""
    
    async for session in get_session():
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ —Ç–∏–ø–∞–º
        roots_query = select(Word).where(Word.morpheme_type == 'roots')
        roots_result = await session.execute(roots_query)
        roots_count = len(roots_result.scalars().all())
        
        prefixes_query = select(Word).where(Word.morpheme_type == 'prefixes')
        prefixes_result = await session.execute(prefixes_query)
        prefixes_count = len(prefixes_result.scalars().all())
        
        endings_query = select(Word).where(Word.morpheme_type == 'endings')
        endings_result = await session.execute(endings_query)
        endings_count = len(endings_result.scalars().all())
        
        spelling_query = select(Word).where(Word.morpheme_type == 'spelling')
        spelling_result = await session.execute(spelling_query)
        spelling_count = len(spelling_result.scalars().all())
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º –º–æ—Ä—Ñ–µ–º:")
        print(f"üåø –ö–æ—Ä–Ω–∏: {roots_count} —Å–ª–æ–≤")
        print(f"üî§ –ü—Ä–∏—Å—Ç–∞–≤–∫–∏: {prefixes_count} —Å–ª–æ–≤")
        print(f"üîö –û–∫–æ–Ω—á–∞–Ω–∏—è: {endings_count} —Å–ª–æ–≤")
        print(f"‚úçÔ∏è –°–ª–∏—Ç–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—å–Ω–æ–µ, –¥–µ—Ñ–∏—Å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ: {spelling_count} —Å–ª–æ–≤")
        print(f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {roots_count + prefixes_count + endings_count + spelling_count}")

async def main():
    print("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ–≤...\n")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    await show_words_stats()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞
    await update_existing_words()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    await show_words_stats()

if __name__ == "__main__":
    asyncio.run(main()) 