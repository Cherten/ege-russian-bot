import asyncio
import os
import sys
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from database.database import get_session

async def analyze_database_structure():
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*60)
    
    # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    db_path = "../vocabulary_bot.db"
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üìã 1. –°–ü–ò–°–û–ö –í–°–ï–• –¢–ê–ë–õ–ò–¶:")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        for table in tables:
            table_name = table[0]
            print(f"  ‚úÖ {table_name}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute(f"SELECT COUNT(*) FROM `{table_name}`;")
            count = cursor.fetchone()[0]
            print(f"     üìä –ó–∞–ø–∏—Å–µ–π: {count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info(`{table_name}`);")
            columns = cursor.fetchall()
            print(f"     üîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            for col in columns:
                col_id, col_name, col_type, not_null, default_val, pk = col
                pk_marker = " üîë" if pk else ""
                null_marker = " ‚ö†Ô∏èNOT NULL" if not_null else ""
                default_marker = f" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_val})" if default_val else ""
                print(f"        ‚Ä¢ {col_name}: {col_type}{pk_marker}{null_marker}{default_marker}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
            if count > 0 and count <= 1000:  # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
                print(f"     üìñ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                try:
                    cursor.execute(f"SELECT * FROM `{table_name}` LIMIT 3;")
                    rows = cursor.fetchall()
                    col_names = [description[0] for description in cursor.description]
                    
                    for i, row in enumerate(rows, 1):
                        print(f"        –ó–∞–ø–∏—Å—å {i}:")
                        for col_name, value in zip(col_names, row):
                            display_value = str(value)[:50] + "..." if len(str(value)) > 50 else str(value)
                            print(f"          {col_name}: {display_value}")
                except Exception as e:
                    print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            print()
        
        conn.close()
        
        print("\n" + "="*60)
        print("üîß 2. –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ñ–ò–î–ê–ï–ú–û–ô –°–¢–†–£–ö–¢–£–†–û–ô:")
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –º–æ–¥–µ–ª–µ–π
        expected_structures = {
            'users': ['id', 'telegram_id', 'username', 'first_name', 'last_name', 'is_active', 'notifications_enabled', 'created_at'],
            'words': ['id', 'word', 'definition', 'explanation', 'morpheme_type', 'difficulty_level', 'puzzle_pattern', 'hidden_letters', 'created_at'],
            'user_words': ['id', 'user_id', 'word_id', 'mistakes_count', 'correct_answers_count', 'current_interval_index', 'next_repetition', 'is_learned', 'created_at', 'last_reviewed'],
            'training_sessions': ['id', 'user_id', 'session_type', 'words_total', 'words_correct', 'words_incorrect', 'started_at', 'completed_at'],
            'training_answers': ['id', 'session_id', 'word_id', 'user_answer', 'is_correct', 'answered_at']
        }
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        for table_name, expected_cols in expected_structures.items():
            print(f"\nüìä –¢–∞–±–ª–∏—Ü–∞ '{table_name}':")
            
            try:
                cursor.execute(f"PRAGMA table_info(`{table_name}`);")
                actual_columns = cursor.fetchall()
                actual_col_names = [col[1] for col in actual_columns]
                
                print(f"  –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: {', '.join(expected_cols)}")
                print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è: {', '.join(actual_col_names)}")
                
                missing_cols = set(expected_cols) - set(actual_col_names)
                extra_cols = set(actual_col_names) - set(expected_cols)
                
                if missing_cols:
                    print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {', '.join(missing_cols)}")
                
                if extra_cols:
                    print(f"  ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(extra_cols)}")
                
                if not missing_cols and not extra_cols:
                    print(f"  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
                    
            except sqlite3.OperationalError as e:
                print(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    print(f"\n" + "="*60)
    print("üéØ 3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–ò–ì–†–ê–¶–ò–ò:")
    print("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏.")
    
    return True

if __name__ == "__main__":
    asyncio.run(analyze_database_structure()) 