import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from database.database import get_session

async def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    
    async for session in get_session():
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            result = await session.execute(text("SELECT name FROM sqlite_master WHERE type='table';"))
            tables = result.fetchall()
            
            if not tables:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ - —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return False
            
            print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            table_names = []
            for table in tables:
                table_name = table[0]
                table_names.append(table_name)
                print(f"  ‚úÖ {table_name}")
            
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            required_tables = ['users', 'words', 'user_words', 'training_sessions', 'training_answers']
            missing_tables = []
            
            for required_table in required_tables:
                if required_table not in table_names:
                    missing_tables.append(required_table)
            
            if missing_tables:
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
                for missing in missing_tables:
                    print(f"  ‚ùå {missing}")
                return False
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            
            print("\n" + "="*50)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_words
            if 'user_words' in table_names:
                print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_words:")
                result = await session.execute(text("PRAGMA table_info(user_words);"))
                columns = result.fetchall()
                
                for column in columns:
                    col_id, col_name, col_type, not_null, default_val, pk = column
                    print(f"  ‚Ä¢ {col_name} ({col_type}) {'NOT NULL' if not_null else 'NULL'} {'PK' if pk else ''}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ correct_answers_count
                column_names = [col[1] for col in columns]
                if 'correct_answers_count' in column_names:
                    print("\n‚úÖ –ü–æ–ª–µ 'correct_answers_count' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                else:
                    print("\n‚ö†Ô∏è  –ü–æ–ª–µ 'correct_answers_count' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

async def main():
    success = await check_database_structure()
    if not success:
        print("\nüîß –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
        print("python -c \"from database.database import init_db; import asyncio; asyncio.run(init_db())\"")

if __name__ == "__main__":
    asyncio.run(main()) 