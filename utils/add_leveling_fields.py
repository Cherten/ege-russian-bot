#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users
–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è: experience_points (INTEGER) –∏ level (INTEGER)
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from database.database import engine

async def add_leveling_fields():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users"""
    print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users...")
    
    try:
        async with engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –ø–æ–ª—è —É–∂–µ (SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
            check_columns_query = text("""
                PRAGMA table_info(users)
            """)
            
            result = await conn.execute(check_columns_query)
            existing_columns = {row[1] for row in result.fetchall()}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ experience_points, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'experience_points' not in existing_columns:
                add_experience_query = text("""
                    ALTER TABLE users 
                    ADD COLUMN experience_points INTEGER DEFAULT 0
                """)
                await conn.execute(add_experience_query)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ experience_points")
            else:
                print("‚ÑπÔ∏è  –ü–æ–ª–µ experience_points —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ level, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'level' not in existing_columns:
                add_level_query = text("""
                    ALTER TABLE users 
                    ADD COLUMN level INTEGER DEFAULT 1
                """)
                await conn.execute(add_level_query)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ level")
            else:
                print("‚ÑπÔ∏è  –ü–æ–ª–µ level —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö level = NULL –∏–ª–∏ 0
            update_users_query = text("""
                UPDATE users 
                SET level = 1, experience_points = 0 
                WHERE level IS NULL OR level = 0 OR experience_points IS NULL
            """)
            result = await conn.execute(update_users_query)
            updated_count = result.rowcount
            
            if updated_count > 0:
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
            
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

async def rollback_leveling_fields():
    """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (—É–¥–∞–ª—è–µ—Ç –ø–æ–ª—è —É—Ä–æ–≤–Ω–µ–π)"""
    print("üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π...")
    
    try:
        async with engine.begin() as conn:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ experience_points
            try:
                drop_experience_query = text("""
                    ALTER TABLE users DROP COLUMN experience_points
                """)
                await conn.execute(drop_experience_query)
                print("‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ experience_points")
            except Exception as e:
                print(f"‚ÑπÔ∏è  –ü–æ–ª–µ experience_points –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ: {e}")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ level
            try:
                drop_level_query = text("""
                    ALTER TABLE users DROP COLUMN level
                """)
                await conn.execute(drop_level_query)
                print("‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ level")
            except Exception as e:
                print(f"‚ÑπÔ∏è  –ü–æ–ª–µ level –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ: {e}")
        
        print("üéâ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--rollback":
        asyncio.run(rollback_leveling_fields())
    else:
        print("üéØ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python add_leveling_fields.py          - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è")
        print("  python add_leveling_fields.py --rollback - –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print()
        
        if input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ").lower() == 'y':
            success = asyncio.run(add_leveling_fields())
            if success:
                print("\nüéâ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            else:
                print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫.")
                sys.exit(1)
        else:
            print("–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
