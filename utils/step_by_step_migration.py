import os
import sys
import sqlite3
import shutil
from datetime import datetime

def step_by_step_migration():
    """–ü–æ—à–∞–≥–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –ü–û–®–ê–ì–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*50)
    
    db_path = "../vocabulary_bot.db"
    backup_path = f"../vocabulary_bot_backup_step_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {os.path.basename(backup_path)}")
        
        # –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å SQLite
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\nüìä –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_words
        cursor.execute("PRAGMA table_info(user_words);")
        columns = cursor.fetchall()
        column_names = [col[1] for col in columns]
        
        print(f"–ü–æ–ª—è –≤ user_words: {', '.join(column_names)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º words
        cursor.execute("PRAGMA table_info(words);")
        word_columns = cursor.fetchall()
        word_column_names = [col[1] for col in word_columns]
        
        print(f"–ü–æ–ª—è –≤ words: {', '.join(word_column_names)}")
        
        # –®–ê–ì 2: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        print(f"\nüîß –®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º explanation –≤ words –µ—Å–ª–∏ –Ω–µ—Ç
        if 'explanation' not in word_column_names:
            print("   üìù –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ 'explanation' –≤ words...")
            cursor.execute("ALTER TABLE words ADD COLUMN explanation TEXT;")
            conn.commit()
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            print("   ‚ÑπÔ∏è  –ü–æ–ª–µ 'explanation' —É–∂–µ –µ—Å—Ç—å")
        
        # –î–æ–±–∞–≤–ª—è–µ–º morpheme_type –≤ words –µ—Å–ª–∏ –Ω–µ—Ç
        if 'morpheme_type' not in word_column_names:
            print("   üìù –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ 'morpheme_type' –≤ words...")
            cursor.execute("ALTER TABLE words ADD COLUMN morpheme_type VARCHAR(50) DEFAULT 'roots';")
            conn.commit()
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            print("   ‚ÑπÔ∏è  –ü–æ–ª–µ 'morpheme_type' —É–∂–µ –µ—Å—Ç—å")
        
        # –î–æ–±–∞–≤–ª—è–µ–º correct_answers_count –≤ user_words –µ—Å–ª–∏ –Ω–µ—Ç
        if 'correct_answers_count' not in column_names:
            print("   üìù –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ 'correct_answers_count' –≤ user_words...")
            cursor.execute("ALTER TABLE user_words ADD COLUMN correct_answers_count INTEGER DEFAULT 0;")
            conn.commit()
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            cursor.execute("PRAGMA table_info(user_words);")
            columns = cursor.fetchall()
            column_names = [col[1] for col in columns]
        else:
            print("   ‚ÑπÔ∏è  –ü–æ–ª–µ 'correct_answers_count' —É–∂–µ –µ—Å—Ç—å")
        
        print(f"\nüìà –®–ê–ì 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ words
        cursor.execute("UPDATE words SET explanation = '' WHERE explanation IS NULL;")
        cursor.execute("UPDATE words SET morpheme_type = 'roots' WHERE morpheme_type IS NULL OR morpheme_type = '';")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º correct_answers_count –Ω—É–ª—è–º–∏
        cursor.execute("UPDATE user_words SET correct_answers_count = 0 WHERE correct_answers_count IS NULL;")
        
        conn.commit()
        print("   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        print(f"\nüßÆ –®–ê–ì 4: –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏ user-word
        cursor.execute("""
            UPDATE user_words 
            SET correct_answers_count = (
                SELECT COUNT(*)
                FROM training_answers ta
                JOIN training_sessions ts ON ta.session_id = ts.id
                WHERE ts.user_id = user_words.user_id 
                AND ta.word_id = user_words.word_id 
                AND ta.is_correct = 1
            );
        """)
        
        conn.commit()
        print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–¥—Å—á–∏—Ç–∞–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        
        print(f"\nüèÜ –®–ê–ì 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–º–µ—á–µ–Ω–∏–µ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ–≤–∞ —Å 10+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω—ã–µ
        cursor.execute("""
            UPDATE user_words 
            SET is_learned = 1 
            WHERE correct_answers_count >= 10 AND is_learned = 0;
        """)
        
        updated_rows = cursor.rowcount
        conn.commit()
        print(f"   ‚úÖ {updated_rows} —Å–ª–æ–≤ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—ã—É—á–µ–Ω–Ω—ã–µ (10+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)")
        
        # –®–ê–ì 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"\nüìä –®–ê–ì 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        cursor.execute("SELECT COUNT(*) FROM users;")
        users_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM words;")
        words_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_words;")
        user_words_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_words WHERE correct_answers_count > 0;")
        words_with_answers = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_words WHERE correct_answers_count >= 10;")
        auto_learned = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_words WHERE is_learned = 1;")
        total_learned = cursor.fetchone()[0]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        cursor.execute("SELECT correct_answers_count, COUNT(*) FROM user_words GROUP BY correct_answers_count ORDER BY correct_answers_count;")
        distribution = cursor.fetchall()
        
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"   üìö –°–ª–æ–≤: {words_count}")
        print(f"   üîó –°–≤—è–∑–µ–π user_words: {user_words_count}")
        print(f"   üéØ –°–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏: {words_with_answers}")
        print(f"   üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—É—á–µ–Ω–Ω—ã—Ö (10+): {auto_learned}")
        print(f"   ‚úÖ –í—Å–µ–≥–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö: {total_learned}")
        
        print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:")
        for count, num in distribution:
            if count <= 15:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 15
                print(f"   {count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {num} —Å–ª–æ–≤")
        
        conn.close()
        
        print(f"\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞") 
        print(f"‚úÖ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞")
        
        print(f"\nüìö –¢–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤—ã—É—á–µ–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ:")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö 7 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ò–õ–ò")
        print(f"   ‚Ä¢ 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ø–∏—é
        if os.path.exists(backup_path):
            shutil.copy2(backup_path, db_path)
            print("üîÑ –ë–∞–∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫–æ–ø–∏–∏")
        return False

if __name__ == "__main__":
    step_by_step_migration() 